# The format of this file is YAML
#
# wr will load its configuration settings from one or more files named
# .wr_config[.production|.development].yml found in these directories, in
# order of precedence:
# 1) The current directory
# 2) Your home directory
# 3) The directory pointed to by the environment variable $WR_CONFIG_DIR
#
# .wr_config.yml files are always read, and can be used to define settings
# common to both production and development deployments.
# .wr_config.production.yml files are only read in a production context:
# either a --deployment production option has been passed to the wr
# executable, or the environment variable $WR_DEPLOYMENT has been set to
# 'production'.
# A similar story applies for .wr_config.development.yml files, which are
# used when things are set to 'development'.
# The default deployment is production (unless you're in the git repository for
# wr, in which case it is development).
#
# If a setting is found in none of the files read, then an environment variable
# is checked: WR_<setting name in caps>. Eg. to define the manager_scheduler
# option you might do:
# export WR_MANAGER_SCHEDULER="lsf"
#
# Note that all worker nodes need to be able to see your desired set of config
# files, so either define them in environment variables or put the config files
# on a disc that is mounted and shared across all your compute nodes.


# manager_port: What port should the wr manager listen on?
# This defaults to "xxxxx", where xxxxx is 1021 + 4*[your user id] + 0 if
# production or + 2 if development. Note, this is a string (quoted). The
# calculated default should hopefully give you port numbers that no other
# software or other user of wr on your machine is using.
# NB: It is very important to have different settings for your production
# manager and your development manager. If you have multiple people running
# wr on the same machine, and you explicitly set this instead of relying on
# the default, each individual person should have their own unique manager_port
# specified in their personal ~/.wr_config.development.yml and
# ~/.wr_config.production.yml files.
#
# Before being able to use wr you must start the manager by running 'wr
# manager'. It will start listening on the specified port on your local host.
# Your other invocations of 'wr' also use this option to know what port to
# connect to, but they'll only succeed if you run them from the same host you
# started the manager on, or if you have set the manager_host option to the
# host you started the manager on.
# wr commands that are spawned by the manager itself are given the real
# ip address of the host the manager is running on, so these commands do not
# need manager_host to be set.
# For multi-machine systems it is required that all hosts that could end up
# running a wr command be able to do tcp communication with the host you
# launch the manager on.
#manager_port: "11301"

# manager_web: What port should the wr manager serve its web interface on?
# This defaults to "xxxxx", where xxxxx is 1021 + 4*[your user id] + 1 if
# production or + 3 if development. Note, this is a string (quoted). The
# calculated default should hopefully give you port numbers that no other
# software or other user of wr on your machine is using.
# NB: This must be different to the manager_port, and to anyone else's port
# choice on the same machine.
#manager_web: "11302"

# manager_host: What host was 'wr manager' started on?
# This is optional and defaults to "localhost".
#
# This option determines where wr commands (other than the manager command)
# try and connect to your wr manager. You only need to set this if you plan
# on running wr commands yourself on a host that is different to the one you
# you plan to start the wr manager on.
# For more details, see the notes for the manager_port option above.
manager_host: "localhost"

# manager_dir: Where should the wr manager store its working files?
# This defaults to a directory prefixed with .wr in your home directory.
#
# The final directory name will be suffixed with "_[deployment]", eg. by default
# when developing the directory will be ~/.wr_development. For this reason
# you do not have to set this differently in your production and development
# config files. The other file-name-based configuration options like
# 'manager_pid_file' and 'manager_db_file' also do not need to be altered from
# their defaults.
#
# The files stored in here are, by default, the manager's pid file, log file and
# database related files.
manager_dir: "~/.wr"

# manager_pid_file: Where should wr manager store its pid file?
# This defaults to a file named "pid" in manager_dir.
#
# You can set this to an absolute path to ignore manager_dir; for example if
# you have the root permissions to set things up, you may prefer to set this to
# /var/run/wr/pid
manager_pid_file: "pid"

# manager_log_file: Where should wr manager store its log file?
# This defaults to a file named "log" in manager_dir.
#
# You can set this to an absolute path to ignore manager_dir; for example if
# you have the root permissions to set things up, you may prefer to set this to
# /var/log/wr/pid
manager_log_file: "log"

# manager_db_file: Where should wr manager store its database file?
# This defaults to a file named "db" in manager_dir.
#
# You can set this to an absolute path to ignore manager_dir. Note that you may
# need quite a lot of disk space for this, especially after you've run millions
# of jobs, since a permanent record of everything you've done is held in this
# file.
#
# WARNING: the database file will eventually contain your environment variables,
# so you should secure this file and not make it public if you have passwords
# set as the values of environment variables.
manager_db_file: "db"

# manager_db_bk_file: Where should wr manager back up its database file?
# This defaults to a file named "db_bk" in manager_dir.
#
# You can set this to an absolute path to ignore manager_dir (and ideally you
# should set this to a path on a different disk or better yet a different
# machine).
#
# Note that you may need quite a lot of disk space for this, as when a
# new backup starts it is written to a temp file in the directory you specify
# before replacing the file at the path you specified, so peaking to 2x disk
# usage.
manager_db_bk_file: "db_bk"

# manager_umask: What umask should be used when wr manager creates files?
# This defaults to 007 (user+group read+writable, no access to others).
# Note, this is a number (no quotes).
#
# Here are examples of alternative umasks:
# 022 = world readable, user read+writable
# 002 = world readable, user+group read+writable
manager_umask: 007

# manager_scheduler: What job scheduler should be used to run 'wr runner'?
# This defaults to "local" and is overridden by the --scheduler option to
# 'wr manager start'.
#
# "local" means run everything on the local machine.
# "lsf" means submit to LSF using 'bsub'.
manager_scheduler: "local"

# runner_exec_shell: What shell should be used to run commands in?
# This defaults to bash, regardless of your current shell.
#
# Avoid the use of dash on Ubuntu, which is its default sh; bash is STRONGLY
# recommended.
runner_exec_shell: "bash"

# deploy_pid_file: Where should 'wr cloud deploy' store its pid file?
# This defaults to a file named "pid_deploy" in manager_dir.
#
# You can set this to an absolute path to ignore manager_dir; for example if
# you have the root permissions to set things up, you may prefer to set this to
# /var/run/wr/pid_deploy
deploy_pid_file: "pid_deploy"